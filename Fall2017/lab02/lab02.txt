Lab 02
------

1. Consider a string S. Then consider a function to reverse the SUBSTRING 
   of S from position i to j, inclusive. For example, if S were defined as:  
   char S[]="abcdefg";
      then 
         revS( S, 0, strlen(S)-1 ); changes original S to: "gfedcba"
         revS( S, 3, 4 );           changes original S to: "abcedfg"
         revS( S, 3, 3 );           S is unchanged


2. Consider the following implementation of revS:

    void revS(char *S, int a, int b) {
      int i,j;
      i=a;
      j=b;
      char temp;
      while (i<j) {
         temp=S[i];
         S[i]=S[j];
         S[j]=temp;
         i++;
         j--;
      }
    }


1. Write a program with a main function that calls revS in order to
   reverse the entire string. Run it to make sure it works.
   Try calling revS with various values for the arguments.

2. When considering time complexity for revS, the SIZE of the problem is
   the length of the substring being reversed. Thus n=(b-a). 
   Explain why.

3. Figure out time complexity for revS as a function of n, using values 
   such as k1, k2, etc., for the final constant values. 

4. What is the time complexity in big-O notation?

5. Consider the following function:
    
    int large(int q) {
      //ASSUME q>0 always
      int x=q; 
      int y=q; 
      int i;
      int j;
      for (i=1;i<=q;i++) {
         x=q-i;
         for (j=q;j>0;j--) {
           y=y+x;
         }
      }
      return (x+y);
        }
    
    
   For time complexity for function large, what is the size of the problem? 
   (i.e., what is "n"?)

6. Calculate the time complexity for function large as a function of n. 
   Show your work.
   Write a final version of your function using generic names such as 
   k1, k2, etc., for the final constants. 

7. Give the complexity in Big-O notation for time complexity.

